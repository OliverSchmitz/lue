name: Linux CI

on:
  push:
    branches-ignore:
      - "ghxyz"
    paths:
      - "conanfile.py"
      - ".github/workflows/linux.yml"
      - "environment/cmake/**"
      - "environment/script/write_conan_profile.py"
      - "source/**"
      - "!source/qa/python/qa/**"

jobs:
    build:

        strategy:
            matrix:
                os: ["ubuntu-22.04"]
                python-version: ["3.9", "3.12"]
                compiler:
                    # To be recognized by Conan, name must be one of:
                    #     'Visual Studio', 'apple-clang', 'clang', 'gcc', 'intel', 'intel-cc', 'mcst-lcc',
                    #     'msvc', 'qcc', 'sun-cc'
                    - { name: gcc  , version:  9, cc: gcc-9   , cxx: g++-9     , package: g++-9    }
                    - { name: gcc  , version: 12, cc: gcc-12  , cxx: g++-12    , package: g++-12   }
                    - { name: clang, version: 11, cc: clang-11, cxx: clang++-11, package: clang-11 }
                    - { name: clang, version: 15, cc: clang-15, cxx: clang++-15, package: clang-15 }
            fail-fast: false

        runs-on: ${{ matrix.os }}

        name: ${{ matrix.os }} / ${{ matrix.compiler.cxx }} / python - ${{ matrix.python-version }}

        defaults:
          run:
            shell: bash -l {0}

        env:
          source_directory: $GITHUB_WORKSPACE
          build_directory: $GITHUB_WORKSPACE/../build
          runtime_install_directory: $GITHUB_WORKSPACE/../runtime_install
          development_install_directory: $GITHUB_WORKSPACE/../development_install
          lue_consume_source_directory: $GITHUB_WORKSPACE/../lue_consume
          lue_consume_build_directory: $GITHUB_WORKSPACE/../lue_consume_build
          hpx_version: 1.9.1
          hpx_source_directory: $GITHUB_WORKSPACE/../hpx-source
          hpx_build_directory: $GITHUB_WORKSPACE/../hpx-build
          hpx_install_directory: $GITHUB_WORKSPACE/../hpx-install
          mdspan_source_directory: $GITHUB_WORKSPACE/../mdspan-source
          mdspan_build_directory: $GITHUB_WORKSPACE/../mdspan-build
          mdspan_install_directory: $GITHUB_WORKSPACE/../mdspan-install

        steps:

        - uses: actions/checkout@v4
        - uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}

        - name: install packages
          run: |
              sudo apt-get update
              sudo apt-get remove libunwind-14-dev
              sudo apt-get install \
                  cmake \
                  doxygen \
                  graphviz \
                  hwloc \
                  lftp \
                  libasio-dev \
                  libboost-all-dev \
                  libdocopt-dev \
                  libfmt-dev \
                  libglfw3-dev \
                  libgdal-dev \
                  libgoogle-perftools-dev \
                  libhdf5-dev \
                  libvulkan-dev \
                  ${{ matrix.compiler.package }} \
                  ninja-build \
                  nlohmann-json3-dev \
                  pybind11-dev \

              pip3 install --upgrade pip
              pip3 install \
                  breathe \
                  conan \
                  docopt \
                  jinja2 \
                  markupsafe \
                  matplotlib \
                  numpy \
                  pip \
                  ruamel.yaml \
                  sphinx

        - name: configure, build, install hpx / mdspan
          run: |
              wget https://github.com/STEllAR-GROUP/hpx/archive/refs/tags/v${{ env.hpx_version }}.tar.gz
              tar -zx --directory=$(dirname ${{ env.hpx_source_directory }}) --file v${{ env.hpx_version }}.tar.gz
              cp ${{ env.source_directory }}/CMakeHPXPresets.json ${{ env.hpx_source_directory }}/CMakeUserPresets.json
              mkdir ${{ env.hpx_build_directory }}
              cd ${{ env.hpx_source_directory }}
              cmake \
                  --preset hpx_release_node_configuration \
                  -B ${{ env.hpx_build_directory }} \
                  -G "Ninja" \
                  -D CMAKE_BUILD_TYPE=Release
              cmake --build ${{ env.hpx_build_directory }} --target all
              cmake --install ${{ env.hpx_build_directory }} --prefix ${{ env.hpx_install_directory }} --strip
              rm -fr ${{ env.hpx_build_directory }} ${{ env.hpx_source_directory }}

              git clone https://github.com/kokkos/mdspan.git ${{ env.mdspan_source_directory }}
              cd ${{ env.mdspan_source_directory }}
              git checkout a799088  # 20191010

              mkdir ${{ env.mdspan_build_directory }}
              cmake \
                  -G "Ninja" \
                  -S ${{ env.mdspan_source_directory }} \
                  -B ${{ env.mdspan_build_directory }} \
                  -D CMAKE_BUILD_TYPE=Release
              cmake --build ${{ env.mdspan_build_directory }} --target all
              cmake --install ${{ env.mdspan_build_directory }} --prefix ${{ env.mdspan_install_directory }} --strip
              rm -fr ${{ env.mdspan_build_directory }} ${{ env.mdspan_source_directory }}

        - name: configure
          run: |
              python3 environment/script/write_conan_profile.py ${{ matrix.compiler.name }} host_profile
              python3 environment/script/write_conan_profile.py ${{ matrix.compiler.name }} build_profile
              mkdir ${{ env.build_directory }}
              CC=${{ matrix.compiler.cc }} CXX=${{ matrix.compiler.cxx }} LUE_CONAN_PACKAGES="imgui" \
                  conan install . \
                      --profile:host=host_profile \
                      --profile:build=build_profile \
                      --build=missing \
                      --output-folder=${{ env.build_directory }}
              CMAKE_PREFIX_PATH=${{ env.build_directory }} \
                  cmake --preset conan-release \
                      -B ${{ env.build_directory }} \
                      -D CMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
                      -D CMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
                      -D LUE_BUILD_DOCUMENTATION=TRUE \
                      -D LUE_BUILD_QA=TRUE \
                      -D LUE_QA_WITH_PYTHON_API=TRUE \
                      -D LUE_QA_WITH_TESTS=TRUE \
                      -D LUE_QA_TEST_NR_LOCALITIES_PER_TEST=1 \
                      -D LUE_QA_TEST_NR_THREADS_PER_LOCALITY=2 \
                      -D LUE_DATA_MODEL_WITH_PYTHON_API=TRUE \
                      -D LUE_DATA_MODEL_WITH_UTILITIES=TRUE \
                      -D LUE_FRAMEWORK_WITH_PYTHON_API=TRUE \
                      -D LUE_BUILD_HPX=FALSE

        - name: build
          run: |
              cmake --build ${{ env.build_directory }} --target all

        - name: install
          run: |
              cmake \
                  --install ${{ env.build_directory }} \
                  --prefix ${{ env.runtime_install_directory }} \
                  --component lue_runtime \
                  --strip
              cmake \
                  --install ${{ env.build_directory }} \
                  --prefix ${{ env.development_install_directory }} \
                  --component lue_development \
                  --strip

        - name: test
          run: |
              # Unit tests
              ctest --test-dir ${{ env.build_directory }} --output-on-failure

              # Test of runtime targets
              ${{ env.runtime_install_directory }}/bin/lue_translate --version
              ${{ env.runtime_install_directory }}/bin/lue_validate --version
              ${{ env.runtime_install_directory }}/bin/lue_view --version

              export PYTHONPATH="${{ env.runtime_install_directory }}/lib/python${{ matrix.python-version }}:$PYTHONPATH"
              ${{ env.runtime_install_directory }}/bin/lue_calculate --version
              ${{ env.runtime_install_directory }}/bin/lue_scalability --version
              python3 -c "import lue, lue.data_model, lue.framework, lue.pcraster, lue.qa.scalability; print(lue.__version__)"

              # Test of imported CMake targets
              git clone https://github.com/computationalgeography/lue_consume.git ${{ env.lue_consume_source_directory }}
              cmake \
                  -S ${{ env.lue_consume_source_directory }} \
                  -B ${{ env.lue_consume_build_directory }} \
                  -G "Ninja" \
                  -D CMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
                  -D CMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }}
                  -D CMAKE_BUILD_TYPE=Release \
                  -D CMAKE_POLICY_DEFAULT_CMP0144=NEW \
                  -D LUE_ROOT=${{ env.development_install_directory }} \
                  -D HPX_ROOT=${{ env.hpx_install_directory }} \
                  -D MDSPAN_ROOT=${{ env.mdspan_install_directory }}
              cmake --build ${{ env.lue_consume_build_directory }} --target all
              ${{ env.lue_consume_build_directory }}/lue_consume_data_model
              ${{ env.lue_consume_build_directory }}/lue_consume_framework

        # - name: source package
        #   run: |
        #       cmake \
        #           --build ${{ env.build_directory }} \
        #           --target package_source
        #       mkdir src
        #       cd src
        #       tar zxf ../lue-*.tar.gz
        #       mkdir bld
        #       cd lue-*
        #       ln -s ${{ env.build_directory }}/CMakePresets.json CMakeUserPresets.json
        #       # TODO Source package does not yet contain the generated source files
        #       # CMAKE_PREFIX_PATH=${{ env.build_directory }} \
        #       #     cmake --preset conan-release \
        #       #         -B bld \
        #       #         -D CMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
        #       #         -D CMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
        #       #         -D LUE_DATA_MODEL_WITH_PYTHON_API=TRUE \
        #       #         -D LUE_DATA_MODEL_WITH_UTILITIES=TRUE \
        #       #         -D LUE_BUILD_VIEW=TRUE \
        #       #         -D LUE_BUILD_QA=TRUE \
        #       #         -D LUE_QA_WITH_PYTHON_API=TRUE \
        #       #         -D LUE_FRAMEWORK_WITH_PYTHON_API=TRUE

        #       # TODO Test configuring and building the source package

        - name: documentation
          if: github.ref == 'refs/heads/master' && matrix.compiler.cxx == 'g++-12' && matrix.python-version == '3.10'
          env:
              ftp_server: ${{ secrets.FTP_SERVER }}
              ftp_port: ${{ secrets.FTP_PORT }}
              ftp_username: ${{ secrets.FTP_USERNAME }}
              ftp_password: ${{ secrets.FTP_PASSWORD }}
              remote_dir: ${{ secrets.FTP_REMOTE_DIR }}
              local_dir: "sphinx/"
          run: |
              cmake --build ${{ env.build_directory }} --target cpp_doc py_doc
              cmake --build ${{ env.build_directory }} --target sphinx_doc
              mkdir -p $HOME/.ssh
              echo "HostKeyAlgorithms ssh-rsa" >> $HOME/.ssh/config
              echo "PubkeyAcceptedKeyTypes ssh-rsa" >> $HOME/.ssh/config
              echo "StrictHostKeyChecking no" >> $HOME/.ssh/config
              cd ${{ env.build_directory }}/document/doc
              lftp -e "mirror --reverse --delete --transfer-all --parallel=2 $local_dir $remote_dir/doc; quit" -u $ftp_username,$ftp_password sftp://$ftp_server -p $ftp_port
