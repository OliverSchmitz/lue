name: macOS CI

on:
  push:
    branches-ignore:
      - ghxyz
    paths:
      - ".github/workflows/macos.yml"
      - "environment/cmake/**"
      - "source/**"
      - "!source/qa/python/qa/**"

jobs:
    build:

        strategy:
            matrix:
                os: ["macos-11"]
                # python-version: ["3.9"]
            fail-fast: false

        runs-on: ${{ matrix.os }}

        name: ${{ matrix.os }}  # / python - ${{ matrix.python-version }}

        steps:

        - name: checkout lue
          uses: actions/checkout@v3

        - name: configure system
          run: |
              brew update  # > /dev/null || true
              # brew upgrade
              # HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK
              brew install \
                  boost \
                  doxygen \
                  fmt \
                  glfw \
                  graphviz \
                  gperftools \
                  hdf5 \
                  hwloc \
                  nlohmann-json \
                  tree \
                  \
                  gdal \
                  ninja \
                  pybind11

        # - uses: conda-incubator/setup-miniconda@v2
        #   with:
        #       auto-update-conda: true
        #       python-version: ${{ matrix.python-version }}
        #       channels: conda-forge

        # - shell: bash -l {0}
        #   run: |
        #       conda install gdal ninja numpy pip pybind11

        #       # Needed by lue_scalability test below
        #       conda install docopt matplotlib

        #       # Use conan from pypi to get the latest version
        #       pip install conan

        #       conan profile new --detect default

        - name: configure lue
          shell: bash -l {0}
          run: |
              mkdir $GITHUB_WORKSPACE/../build
              cmake \
                  -S . \
                  -B $GITHUB_WORKSPACE/../build \
                  -G "Ninja" \
                  -D CMAKE_BUILD_TYPE=Release \
                  -D FETCHCONTENT_QUIET=FALSE \
                  -D LUE_BUILD_DOCUMENTATION=FALSE \
                  -D LUE_BUILD_QA=TRUE \
                  -D LUE_QA_WITH_PYTHON_API=TRUE \
                  -D LUE_QA_WITH_TESTS=TRUE \
                  -D LUE_QA_TEST_NR_LOCALITIES_PER_TEST=1 \
                  -D LUE_QA_TEST_NR_THREADS_PER_LOCALITY=2 \
                  -D LUE_BUILD_DATA_MODEL=TRUE \
                  -D LUE_DATA_MODEL_WITH_PYTHON_API=TRUE \
                  -D LUE_DATA_MODEL_WITH_UTILITIES=TRUE \
                  -D LUE_BUILD_FRAMEWORK=TRUE \
                  -D LUE_FRAMEWORK_WITH_PYTHON_API=TRUE \
                  -D LUE_BUILD_HPX=TRUE \
                  -D LUE_BUILD_VIEW=TRUE \
                  -D HPX_USE_CMAKE_CXX_STANDARD=TRUE \
                  -D HPX_WITH_MALLOC="tcmalloc" \
                  -D HPX_WITH_FETCH_ASIO=TRUE \
                  -D HPX_WITH_PKGCONFIG=FALSE \
                  -D HPX_WITH_EXAMPLES=FALSE \
                  -D HPX_WITH_TESTS=FALSE

        - name: build lue
          shell: bash -l {0}
          run: |
              cmake --build $GITHUB_WORKSPACE/../build --target all

        - name: test lue
          shell: bash -l {0}
          run: |
              cd $GITHUB_WORKSPACE/../build
              ctest --output-on-failure

        - name: install lue lue_runtime component
          shell: bash -l {0}
          run: |
              cmake --install $GITHUB_WORKSPACE/../build --prefix install --component hpx_runtime
              cmake --install $GITHUB_WORKSPACE/../build --prefix install --component lue_runtime

              install/bin/lue_translate --version
              install/bin/lue_validate --version
              install/bin/lue_view --version

              export PYTHONPATH="install/lib/python${{ matrix.python-version }}:$PYTHONPATH"
              install/bin/lue_scalability --version
              python3 -c "import lue; print(lue.__version__)"
