#!/usr/bin/env bash
set -e

# It is best to run this script with no LUE project-specific environment
# variables set. We don't want the test logic to pick up development files.


# Everything we do here is done in a directory rooted at $tmp_prefix. This
# directory is created if it hasn't already.
tmp_prefix="$HOME/tmp/lue"
source_prefix="$PROJECTS/lue"
peacock_prefix="$PEACOCK_PREFIX/lue"

# # macOS + macports:
# hdf5_include_dir="/opt/local/include"
# hdf5_lib_dir="/opt/local/lib"

# linux:
hdf5_include_dir="/usr/include/hdf5/serial"
hdf5_lib_dir="/usr/lib/x86_64-linux-gnu/hdf5/serial"


# Don't change anything below this line ----------------------------------------
build_type="@CMAKE_BUILD_TYPE@"
build_prefix="$tmp_prefix/build"
install_prefix="$tmp_prefix/install"

platform_path="@peacock_target_platform@"
peacock_include_dir="$peacock_prefix/$platform_path/include"
peacock_lib_dir="$peacock_prefix/$platform_path/lib"

include_dirs="$peacock_include_dir:$hdf5_include_dir"
lib_dirs="$peacock_lib_dir:$hdf5_lib_dir"


mkdir -p $tmp_prefix
cd $tmp_prefix


# Build LUE.
rm -fr $build_prefix
mkdir $build_prefix
rm -fr $install_prefix
mkdir $install_prefix

cd $build_prefix
cmake \
    -DCMAKE_BUILD_TYPE=$build_type \
    -DPEACOCK_PREFIX:PATH=$peacock_prefix \
    -DCMAKE_INSTALL_PREFIX=$install_prefix \
    -DLUE_BUILD_PYTHON_API:BOOL=TRUE \
    $source_prefix
cmake --build . --target all


# Install files needed for creating the LUE Python package.
cmake --build . --target install_lue_py_sources


# Show what we've got.
cd $install_prefix
tree .


# Create source distribution.
python setup.py sdist


# Install package in virtual environment and perform some tests.
virtualenv --system-site-package $tmp_prefix/python
source $tmp_prefix/python/bin/activate
# pip install numpy
cd $tmp_prefix
pip install \
    --force-reinstall \
    --upgrade \
    --no-index \
    --find-links=file://$install_prefix/dist \
    --global-option=build_ext \
    --global-option="-I$include_dirs" \
    --global-option="-L$lib_dirs" \
    "lue==@LUE_VERSION@"


echo "********************************************************"
LD_LIBRARY_PATH=$peacock_lib_dir:$LD_LIBRARY_PATH python -c \
    "import lue; print(\"installed LUE version {}\".format(lue.__version__))"
echo "********************************************************"


# # Create platform wheel.
# # Only supported on Windows and OSX:
# python setup.py bdist_wheel


# Upload distributions.
cd $install_prefix
pip install twine
# twine upload dist/*
