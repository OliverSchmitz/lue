#pragma once
#include "lue/framework/core/define.hpp"
#include <array>
#include <cstdint>
#include <tuple>
#include <hpx/config.hpp>


#if (defined(HPX_HAVE_NETWORKING) && defined(HPX_HAVE_PARCELPORT_MPI)) || defined(HPX_HAVE_MODULE_MPI_BASE)
#define LUE_HPX_WITH_MPI
#endif


namespace lue {

    /*!
        @brief      All unsigned integral element types for which relevant class and function templates are
                    instantiated, in some undefined order
    */
    using UnsignedIntegralElements = std::tuple< {{ UnsignedIntegralElements | join(", ") }} >;

    /*!
        @brief      All signed integral element types for which relevant class and function templates are
                    instantiated, in some undefined order
    */
    using SignedIntegralElements = std::tuple< {{ SignedIntegralElements | join(", ") }} >;

    /*!
        @brief      All floating point element types for which relevant class and function templates are
                    instantiated, in some undefined order
    */
    using FloatingPointElements = std::tuple< {{ FloatingPointElements | join(", ") }} >;

    /*!
        @brief      The Boolean element type type for which relevant class and function templates are
                    instantiated

        A Boolean is typically represented by a small integral element type, like uint8 or int8.
    */
    using BooleanElement = {{ BooleanElement }};

    /*!
        @brief      The count element type type for which relevant class and function templates are
                    instantiated

        A count is typically represented by a large integral element type.
    */
    using CountElement = {{ CountElement }};

    /*!
        @brief      The index element type type for which relevant class and function templates are
                    instantiated

        An index is typically represented by a large integral element type.
    */
    using IndexElement = {{ IndexElement }};

    /*!
        @brief      The flow direction element type type for which relevant class and function templates are
                    instantiated

        A flow direction is typically represented by a small integral element type, like uint8 or int8.
    */
    using FlowDirectionElement = {{ FlowDirectionElement }};

    /*!
        @brief      The ranks for which relevant class and function templates are instantiated, in some
                    undefined order
    */
    constexpr static std::array<Rank, {{ ranks | length }}> ranks{ {{ ranks | join(", ") }} };

}  // namespace lue
