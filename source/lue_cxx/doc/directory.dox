/*!
    @dir    include/lue/item
    @brief  This directory contains code for storing information per item

    The information stored for a collection of items differs with
    respect to various aspects, whatever the information is that needs
    to be stored. For example, per item information may need to be
    stored about its id, location in time, location in space, property
    values, etc. This directory contains code for storing information for
    multiple items, given a certain combination of aspects.

    # constant / variable collection
    A constant collection means that the collection of items does not
    change through time. Often, all items are known at the start of
    a simulation.

    A variable collection means that the collection of items changes
    through time. Items are removed and added. Often, not all items are
    known at the start of the simulation.

    This distinction matters when information about multiple items is
    stored in a single HDF5 dataset. This is an efficient, but rigid
    format, which doesn't allow for items to be added or removed. But
    whenever possible, this format should be used.

    BTW, removing items from a collection does not mean that information
    is removed! It means that after a certain point in time, the item
    is not part of the 'active' collection anymore. Adding items means
    that the item becomes part of the 'active' collection, untill it
    is removed again. During a simulation, only information about items
    in the 'active' collection must be stored.

    # Aspects
    - Value *shape* difference between items
    - Value *shape* variability through time
    - Value *occurrence* through time
        - *continuous*
            - It is not possible to pin the value to specific locations
                in time
            - There is no location in time where the value changes
            - Uninterrupted extension in time
            - This implies that the value is constant
            - This implies that the collection of items is contant
        - *synchronous*
            - The value exists at specific moments in time
            - There are locations in time where the value changes
            - Existing at the same time
            - This implies that the value varies through time
        - *asynchronous*
            - The value exists at specific moments in time
            - There are locations in time where the value changes
            - Not simultaneous in time
            - This implies that the value varies through time


    # Taxonomy / Identification key
    - Does the shape differ between items?
        - no: *same_shape*
            - Does the value change over time?
                - no
                    - `lue::same_shape::ContinuousValue`
                - yes
                    - Does the value shape change over time?
                        - no: *constant_shape*
                            - Do the item values change at the same locations in time?
                                - no
                                    - `lue::same_shape::constant_shape::SynchronousValue`
                                - yes
                                    - `lue::same_shape::constant_shape::AsynchronousValue`
                        - yes: *variable_shape*
                            - Do the item values change at the same locations in time?
                                - no
                                    - `lue::same_shape::variable_shape::SynchronousValue`
                                - yes
                                    - `lue::same_shape::variable_shape::AsynchronousValue`
                                    - Not needed?! This would implie items
                                        having the same shape, that change
                                        at unique locations in time. This can
                                        be better modelled using
                                        `different_shape::variable_shape::AsynchronousValue`
        - yes: *different_shape*
            - Does the value change over time?
                - no
                    - `lue::different_shape::ContinuousValue`
                - yes
                    - Does the value shape change over time?
                        - no: *constant_shape*
                            - Do the item values change at the same locations in time?
                                - no
                                    - `lue::different_shape::constant_shape::SynchronousValue`
                                - yes
                                    - `lue::different_shape::constant_shape::AsynchronousValue`
                        - yes: *variable_shape*
                            - Do the item values change at the same locations in time?
                                - no
                                    - `lue::different_shape::variable_shape::SynchronousValue`
                                - yes
                                    - `lue::different_shape::variable_shape::AsynchronousValue`

    For certain kinds of collection an optimization can be made by
    storing the values of all items in a single HDF5 dataset. These
    optimized collections are stored in the `constant_collection` namespace.

    *It must be possible to create items during the simulation!!!*

    *It must be possible to remove temporal items during the simulation!!!*

    # Collection types
    Resulting collection types of item-related information:

    - lue::same_shape::constant_shape::ContinuousValue
    - lue::same_shape::constant_shape::SynchronousValue
    - lue::same_shape::constant_shape::constant_collection::SynchronousValue
    - lue::same_shape::constant_shape::AsynchronousValue
    - lue::different_shape::constant_shape::ContinuousValue
    - lue::different_shape::constant_shape::SynchronousValue
    - lue::different_shape::constant_shape::constant_collection::SynchronousValue
    - lue::different_shape::constant_shape::AsynchronousValue
    - lue::same_shape::variable_shape::ContinuousValue
    - lue::same_shape::variable_shape::SynchronousValue
    - lue::same_shape::variable_shape::AsynchronousValue
    - lue::different_shape::variable_shape::ContinuousValue
    - lue::different_shape::variable_shape::SynchronousValue
    - lue::different_shape::variable_shape::AsynchronousValue
*/


/*!
    @dir    include/lue/time
    @brief  This directory contains code for storing time domain items

    For each item, a time domain item contains one or more locations in
    time. These locations can be points or periods.

    Time domain items differ with respect to various aspects.
    This directory contains code for storing time domain information for
    collections of items, given a certain combination of aspects. Aspects
    that differ between collections of time domain items are:

    - **→ Does the item collection change over time (collection variability)?**
        - *no*
            - **constant_collection**
        - *yes*
            - **variable_collection**

    - **→ Does each item have a unique location in time?  (time domain sharing)?**
        - *no*
            - **shared_time**
        - *yes*
            - **unique_time**

    Resulting collection types of item-related information:

    aspect | options
    ------ | -------
    collection size variability | constant_collection, variable_collection
    time domain sharing | shared_time, unique_time

    - lue::constant_collection::shared_time::Point
        - `nr_items (time domain) = 1`
        - `nr_values = nr_time_points`
        - Inherits lue::constant_collection::constant_shape::same_shape::Variable
    - lue::constant_collection::unique_time::Point
        - `nr_items (time domain) = nr_items (property set)`
        - `nr_values (unique per item) = nr_time_points (unique per item)`
        - Inherits lue::constant_collection::constant_shape::different_shape::Variable
        - Different shape because the number of time items differs per item
    - lue::variable_collection::shared_time::Point
    - lue::variable_collection::unique_time::Point
*/


/*!
    @dir    include/lue/space
    @brief  This directory contains code for storing space domain items

    Space domain items differ with respect to various aspects.
    This directory contains code for storing space domain information for
    collections of items, given a certain combination of aspects. Aspects
    that differ between collections of space domain items are:

    - **→ Does the item collection change over time (collection variability)?**
        - *no*
            - **constant_collection**
        - *yes*
            - **variable_collection**
    - **→ Do items move through space (mobility)?**
        - *no*
            - **stationary**
        - *yes*
            - **mobile**

    Resulting collection types of item-related information:

    aspect | options
    ------ | -------
    collection size variability | constant_collection, variable_collection
    mobility | stationary, mobile

    - lue::constant_collection::stationary::Point
    - lue::constant_collection::stationary::Box
    - lue::constant_collection::stationary::Linestring
    - lue::constant_collection::stationary::Polygon
    - lue::constant_collection::mobile::SynchronousPoint
    - lue::constant_collection::mobile::AsynchronousPoint
    - lue::constant_collection::mobile::SynchronousBox
    - lue::constant_collection::mobile::AsynchronousBox
    - lue::constant_collection::mobile::AsynchronousLinestring
    - lue::constant_collection::mobile::SynchronousLinestring
    - lue::constant_collection::mobile::AsynchronousPolygon
    - lue::constant_collection::mobile::SynchronousPolygon
*/
