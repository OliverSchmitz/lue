#pragma once
#include <string_view>


#cmakedefine LUE_VERSION "${LUE_VERSION}"
// #cmakedefine LUE_VERSION_TWEAK "${LUE_VERSION_TWEAK}"
// #cmakedefine LUE_GIT_REFSPEC "${LUE_GIT_REFSPEC}"
#cmakedefine LUE_GIT_SHA1 "${LUE_GIT_SHA1}"
#cmakedefine LUE_GIT_SHORT_SHA1 "${LUE_GIT_SHORT_SHA1}"
#cmakedefine LUE_FRAMEWORK_WITH_OPENCL
#cmakedefine LUE_BUILD_DATA_MODEL
#cmakedefine01 LUE_BUILD_FRAMEWORK
#cmakedefine LUE_BUILD_TEST


namespace lue {

class BuildOptions
{

public:

    // C++20
    // static constexpr std::string version{LUE_VERSION};

    // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, hicpp-avoid-c-arrays, modernize-avoid-c-arrays)
    static constexpr char version[]{LUE_VERSION};

    // static constexpr char version_tweak[]{LUE_VERSION_TWEAK};

    // static constexpr char git_refspec[]{LUE_GIT_REFSPEC};

    // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, hicpp-avoid-c-arrays, modernize-avoid-c-arrays)
    static constexpr char git_sha1[]{LUE_GIT_SHA1};

    // NOLINTNEXTLINE(cppcoreguidelines-avoid-c-arrays, hicpp-avoid-c-arrays, modernize-avoid-c-arrays)
    static constexpr char git_short_sha1[]{LUE_GIT_SHORT_SHA1};

    static constexpr bool build_framework{LUE_BUILD_FRAMEWORK};

};


// inline constexpr BuildOptions build_options;

}  // namespace lue
